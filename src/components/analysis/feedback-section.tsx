"use client";

import { useState, useEffect } from "react";
import { Button } from "@/components/ui/button";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { ThumbsUp, ThumbsDown } from "lucide-react";
import { cn } from "@/lib/utils";
import type { AnalysisItem, FeedbackData } from "@/types/analysis";
import { FeedbackService } from "@/lib/feedback-service";
import { useAuth } from "@/hooks/useAuth";

interface FeedbackSectionProps {
  itemData: AnalysisItem;
  assessmentId: string;
}

export function FeedbackSection({ itemData, assessmentId }: FeedbackSectionProps) {
  const { username } = useAuth();
  const [feedbackGiven, setFeedbackGiven] = useState(false);
  const [selectedThumb, setSelectedThumb] = useState<'positive' | 'negative' | null>(null);
  const [showComment, setShowComment] = useState(false);
  const [comment, setComment] = useState('');
  const [submitMessage, setSubmitMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  
  // Check if feedback already exists
  useEffect(() => {
    const checkExistingFeedback = async () => {
      const existingFeedback = await FeedbackService.getFeedback(assessmentId, itemData.title, username || 'anonymous');
      if (existingFeedback) {
        setFeedbackGiven(true);
        setSelectedThumb(existingFeedback.rating);
        if (existingFeedback.comment) {
          setComment(existingFeedback.comment);
        }
      }
    };
    
    checkExistingFeedback();
  }, [assessmentId, itemData.title, username]);

  const saveFeedback = async (rating: 'positive' | 'negative', userComment = '') => {
    setIsLoading(true);
    try {
      const feedbackData: FeedbackData = {
        id: '', // Will be auto-generated by Supabase
        assessmentId: assessmentId,
        title: itemData.title,
        rating: rating,
        comment: userComment,
        timestamp: new Date().toISOString(),
        userId: username || 'anonymous',
        // Store the full item data for context
        itemData: itemData
      };
      
      // Save to Supabase
      const result = await FeedbackService.saveFeedback(feedbackData);
      if (!result.success) {
        console.error('Failed to save feedback:', result.error);
        setSubmitMessage('❌ Failed to save feedback. Please try again.');
        return;
      }
    } finally {
      setIsLoading(false);
    }
  };

  // removeFeedback function removed - deletion only available in management view
  // This keeps the assessment view focused on rating feedback, not deleting it

  const handleThumbClick = async (rating: 'positive' | 'negative') => {
    // Simple rating behavior - always save/update feedback with selected rating
    // No delete functionality - thumbs only change between positive/negative
    const isChangingRating = feedbackGiven && rating !== selectedThumb;
    
    setSelectedThumb(rating);
    setFeedbackGiven(true);
    
    // Save feedback immediately
    await saveFeedback(rating, comment);
    
    // Show success message only if save was successful
    if (!submitMessage.includes('❌')) {
      setSubmitMessage(isChangingRating ? '✅ Feedback updated! 🔄' : '✅ Thanks for your feedback! 🎉');
      
      // Show comment field if it's a negative rating and no comment yet
      if (rating === 'negative' && !comment && !showComment) {
        setShowComment(true);
      } else if (showComment && comment) {
        // If comment field is already open and has content, keep it open
      } else {
        setShowComment(!showComment); // Toggle if clicking again
      }
    }
    
    // Clear success message after 3 seconds
    setTimeout(() => {
      setSubmitMessage('');
    }, 3000);
  };

  const handleCommentSubmit = async () => {
    // Update feedback with comment
    await saveFeedback(selectedThumb!, comment);
    
    // Show success message only if save was successful
    if (!submitMessage.includes('❌')) {
      setSubmitMessage('✅ Comment added! 📝');
      
      // Collapse comment section after a brief delay
      setTimeout(() => {
        setShowComment(false);
      }, 500);
    }
    
    // Clear success message after 3 seconds
    setTimeout(() => {
      setSubmitMessage('');
    }, 3000);
  };

  return (
    <>
      <div className="mt-auto pt-4">
        <div className="flex flex-col items-end">
          <div className="flex items-center gap-2">
            {submitMessage && (
              <span className="text-sm text-primary font-medium animate-pulse mr-2">
                {submitMessage}
              </span>
            )}
            
            {/* Thumb buttons */}
            <div className="flex items-center gap-2">
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleThumbClick('positive')}
                      className={cn(
                        "h-8 px-3 transition-all",
                        selectedThumb === 'positive' 
                          ? "bg-primary/10 text-primary hover:bg-primary/20" 
                          : ""
                      )}
                      aria-label="This was helpful"
                    >
                      <ThumbsUp className={cn(
                        "h-3.5 w-3.5",
                        selectedThumb === 'positive' ? "fill-current" : ""
                      )} />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>This was helpful</p>
                  </TooltipContent>
                </Tooltip>

                <Tooltip>
                  <TooltipTrigger asChild>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => handleThumbClick('negative')}
                      className={cn(
                        "h-8 px-3 transition-all",
                        selectedThumb === 'negative' 
                          ? "bg-destructive/10 text-destructive hover:bg-destructive/20" 
                          : ""
                      )}
                      aria-label="This needs improvement"
                    >
                      <ThumbsDown className={cn(
                        "h-3.5 w-3.5",
                        selectedThumb === 'negative' ? "fill-current" : ""
                      )} />
                    </Button>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>This needs improvement</p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>
          </div>
          
          {/* Comment section - shows after thumb click */}
          {showComment && (
            <div className="w-full mt-4 animate-in">
              <div className="bg-muted/50 rounded-lg p-4">
                <p className="text-xs text-muted-foreground mb-2">
                  💡 Optional: Help us improve by sharing specific details. 
                  You can copy and paste any part of the analysis above.
                </p>
                <textarea
                  value={comment}
                  onChange={(e) => setComment(e.target.value)}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && e.ctrlKey) {
                      handleCommentSubmit();
                    }
                  }}
                  placeholder={
                    selectedThumb === 'positive' 
                      ? "What worked well? (optional)"
                      : "What needs improvement? Please paste the specific text (optional)"
                  }
                  className="w-full p-3 text-sm border rounded-md resize-y min-h-[80px] focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent bg-background"
                />
                <div className="mt-3 flex items-center justify-end gap-2">
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowComment(false)}
                  >
                    Skip
                  </Button>
                  <Button
                    size="sm"
                    onClick={handleCommentSubmit}
                  >
                    Add Comment
                  </Button>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </>
  );
} 